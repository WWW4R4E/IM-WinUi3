// <auto-generated />
using System;
using ChatRoomASP.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ChatRoomASP.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("ChatRoomASP.Models.IMGroup", b =>
                {
                    b.Property<long>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<long>("CreatorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("GroupId");

                    b.HasIndex("CreatorId");

                    b.ToTable("IMGroups");
                });

            modelBuilder.Entity("ChatRoomASP.Models.IMGroupMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("GroupId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("JoinedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("MuteUntil")
                        .HasColumnType("TEXT");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<long>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("GroupId", "UserId")
                        .IsUnique();

                    b.ToTable("IMGroupMembers");
                });

            modelBuilder.Entity("ChatRoomASP.Models.IMMessage", b =>
                {
                    b.Property<long>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<long?>("GroupId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ReceiverId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("SenderId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("SentAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("MessageId");

                    b.HasIndex("SenderId");

                    b.HasIndex("GroupId", "SentAt");

                    b.HasIndex("ReceiverId", "SentAt");

                    b.ToTable("IMMessages");
                });

            modelBuilder.Entity("ChatRoomASP.Models.IMUser", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("LastActiveTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("ProfilePicture")
                        .IsRequired()
                        .HasMaxLength(10240)
                        .HasColumnType("BLOB");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("IMUsers");

                    b.HasData(
                        new
                        {
                            UserId = 10000000L,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            Email = "initial@example.com",
                            LastActiveTime = new DateTimeOffset(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            PasswordHash = "hashedpassword",
                            ProfilePicture = new byte[0],
                            Status = 0,
                            UpdatedAt = new DateTimeOffset(new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 8, 0, 0, 0)),
                            UserName = "InitialUser"
                        });
                });

            modelBuilder.Entity("ChatRoomASP.Models.RelationType", b =>
                {
                    b.Property<int>("RelationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("RelationTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("RelationTypeId");

                    b.ToTable("RelationTypes");

                    b.HasData(
                        new
                        {
                            RelationTypeId = 1,
                            RelationTypeName = "Friend"
                        },
                        new
                        {
                            RelationTypeId = 2,
                            RelationTypeName = "SpecialCare"
                        },
                        new
                        {
                            RelationTypeId = 3,
                            RelationTypeName = "Blacklist"
                        });
                });

            modelBuilder.Entity("ChatRoomASP.Models.UserRelation", b =>
                {
                    b.Property<long>("UserRelationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<long>("InitiatorUserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RelationTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RemarkName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<long>("TargetUserId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("UserRelationId");

                    b.HasIndex("InitiatorUserId");

                    b.HasIndex("RelationTypeId");

                    b.HasIndex("TargetUserId");

                    b.ToTable("UserRelations");
                });

            modelBuilder.Entity("ChatRoomASP.Models.IMGroup", b =>
                {
                    b.HasOne("ChatRoomASP.Models.IMUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("ChatRoomASP.Models.IMGroupMember", b =>
                {
                    b.HasOne("ChatRoomASP.Models.IMGroup", "Group")
                        .WithMany("Members")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChatRoomASP.Models.IMUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ChatRoomASP.Models.IMMessage", b =>
                {
                    b.HasOne("ChatRoomASP.Models.IMGroup", "Group")
                        .WithMany("Messages")
                        .HasForeignKey("GroupId");

                    b.HasOne("ChatRoomASP.Models.IMUser", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId");

                    b.HasOne("ChatRoomASP.Models.IMUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("ChatRoomASP.Models.UserRelation", b =>
                {
                    b.HasOne("ChatRoomASP.Models.IMUser", "InitiatorUser")
                        .WithMany("InitiatedRelations")
                        .HasForeignKey("InitiatorUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChatRoomASP.Models.RelationType", "RelationType")
                        .WithMany("UserRelations")
                        .HasForeignKey("RelationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChatRoomASP.Models.IMUser", "TargetUser")
                        .WithMany("ReceivedRelations")
                        .HasForeignKey("TargetUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InitiatorUser");

                    b.Navigation("RelationType");

                    b.Navigation("TargetUser");
                });

            modelBuilder.Entity("ChatRoomASP.Models.IMGroup", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("ChatRoomASP.Models.IMUser", b =>
                {
                    b.Navigation("InitiatedRelations");

                    b.Navigation("ReceivedRelations");
                });

            modelBuilder.Entity("ChatRoomASP.Models.RelationType", b =>
                {
                    b.Navigation("UserRelations");
                });
#pragma warning restore 612, 618
        }
    }
}
